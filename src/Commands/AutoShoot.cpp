// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoShoot.h"



AutoShoot::AutoShoot(int balls, float delay, double timeout): Command(), mBalls(balls), mDelay(delay), mTimeout(timeout) {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
	Requires(Robot::shooter.get());
	Requires(Robot::feeder.get());
}


// Called just before this Command runs the first time
void AutoShoot::Initialize() {
	SetTimeout(mTimeout);
	feederTimer.Reset();
	feederTimer.Start();
	Robot::shooter->mShoot = true;
}

// Called repeatedly when this Command is scheduled to run
void AutoShoot::Execute() {
	for(int i = 0; i < mBalls; i++)
	{
		if (feederTimer.HasPeriodPassed(mDelay))
		{
			Robot::feeder->left->Set(1.0);
			Robot::feeder->right->Set(1.0);
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool AutoShoot::IsFinished() {
    return IsTimedOut();
}

// Called once after isFinished returns true
void AutoShoot::End() {
	Robot::shooter->mShoot = false;
	Robot::feeder->left->Set(0.0);
	Robot::feeder->left->Set(0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoShoot::Interrupted() {
	Robot::shooter->mShoot = false;
	Robot::feeder->left->Set(0.0);
	Robot::feeder->left->Set(0.0);
}
